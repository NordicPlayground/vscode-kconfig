trigger:
  - master

pool:
  vmImage: ubuntu-20.04

name: $(Year:yyyy).$(Month).$(Rev:r)

steps:
- task: NodeTool@0
  inputs:
    versionSpec: 14
  displayName: Install Node.js

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
  displayName: Set Python version

- script: python -m pip install -r srv/requirements-dev.txt
  displayName: Install Python requirements

- script: |
    set -o errexit -o pipefail
    npm ci
  displayName: Install dependencies

- script: |
    set -o errexit -o pipefail
    npm run lint
  displayName: Run linter

- script: |
    set -o errexit -o pipefail
    python -m mypy --junit-xml out/test-mypy.xml --config-file srv/.mypy.ini
  displayName: Run mypy

- script: |
    set -o errexit -o pipefail
    pytest srv --junitxml=out/test-pytest.xml --cov=srv --cov-report=xml --cov-config=srv/.coveragerc
  displayName: Run python tests

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: out/test-*.xml
    testRunTitle: Publish test results for Python

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: coverage.xml

- script: |
    set -o errexit -o pipefail
    npm run copyright check
  displayName: Check copyright statements

- bash: |
    set -o errexit -o pipefail
    npm install -g vsce
    npm run updateBuildNumber $(Build.BuildNumber)
    vsce package
    pkg=$(ls *.vsix)
    mv -v ${pkg} "$(Build.ArtifactStagingDirectory)/${pkg}"
  displayName: Pack and build extension

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
  displayName: Publish artifact

